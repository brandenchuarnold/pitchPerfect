Bumble Dating App Automation Bot - Development Outline

Current Implementation:

1. Profile Processing Flow:
   - Profile Limit:
     * Maximum of 40 profiles processed
     * Exits gracefully when limit reached
     * Early exit if end of profiles detected
   
   - Early Stopping:
     * Uses the same end message detection as Hinge
     * Uses OCR with 0.8 similarity threshold
     * Saves screenshot of end message for verification
     * Creates visual debug overlay showing matched text
     * Exits gracefully with specific end message
   
   - Target Interactions:
     * Like profiles while disliking undesirables based on AI evaluation
     * If 6-9 consecutive likes occur without any dislikes, force dislike on the next profile
     * Continue liking until reaching a total of 9 likes
     * After reaching 9 likes, reset all counters (consecutive likes, total likes, dislikes)
     * For forced dislikes, still capture and save screenshots without AI evaluation
   
   - Profile Analysis:
     * Takes 9 screenshots while scrolling down (initial + 8 scrolls)
     * For forced dislikes, still captures screenshots and saves to desktop
     * For normal profiles, processes screenshots with AI in separate thread
     * Stays at the bottom of the profile while AI processes
     * Waits for AI response
   
   - Profile Filtering:
     * Dislikes if AI returns empty response
     * Dislikes if desirability score < 0.7
     * Uses fixed coordinate taps for like/dislike actions
       - Dislike button coordinates: 160x1890
       - Like button coordinates: 920x1890
     * AI automatically filters profiles with similar undesirable traits as Hinge
   
   - Results Storage:
     * Saves all profile data in organized directory structure:
       - results/profile_X/screenshots/ - Contains all screenshots
       - results/profile_X/response.json - Contains AI response and timestamp
     * Duplicates results in desktop accessible location:
       - /app/desktop/PitchPerfect_Results_{TIMESTAMP}/profile_X/
     * Saves results for every profile, regardless of outcome
     * Includes timestamp with each response
     * Maintains original screenshot files in images/ directory

2. Screenshot Capture and Analysis:
   - Takes 9 screenshots total (initial + 8 scrolls)
   - Uses consistent 68% scroll distance for reliability
   - Captures full profile content in sequential screenshots
   - Saves as profile_{count}_part{i}.png
   - Creates visualization overlays for debugging
   - Uses OCR with pytesseract to extract text from images
   - Implements visual debug overlays with boxes, lines, and paragraphs
   - Groups text into logical lines and paragraphs based on spatial proximity

3. AI Integration:
   - System Prompt:
     * Profile structure guide with 9 screenshots analysis
     * Detailed trait detection for filtering undesirable profiles
     * Returns JSON with desirability score between 0-1
   
   - Response Processing:
     * Parses JSON from text response by extracting between first { and last }
     * Returns JSON with:
       - desirability: Score between 0-1 indicating profile desirability
     * Handles empty or error responses gracefully
     * Returns empty response for profiles with undesirable traits

4. Error Handling and Logging:
   - Comprehensive logging:
     * Detailed debug logging to file with timestamps
     * Console output for important events
     * Visual overlays saved for debugging
     * Sanitized API payloads to prevent log clutter
   
   - Error recovery:
     * Try-except blocks throughout the codebase
     * Fallback strategies for most failure points
     * Graceful degradation when optimal path fails
     * Detailed error logging with tracebacks at debug level
   
   - Profile Filtering:
     * Multiple layers of validation
     * Consistent handling of rejection cases

5. Multithreading:
   - Parallel processing:
     * Screenshot capture and scrolling in main thread
     * AI processing in background thread
     * Thread synchronization with join()
     * Thread-safe global variable access with locks

6. Configuration:
   - Environment variables for device connection
   - Timestamp-based result directories
   - Authoritative reference files:
     * bumbleFormat.txt - Profile structure information
     * bumblePrompts.txt - Available Bumble prompts
     * bumbleInterests.txt - Available interest categories
     * bumbleMetadata.txt - Additional metadata fields

Future Work:
   - Implement matches and messaging flow
   - Add support for Bumble's unique features (Beeline, BFF mode, etc.)
   - Optimize screenshot analysis for Bumble's interface layout
   - Improve AI evaluation with Bumble-specific criteria

TODO:
1. Update the AI system prompt with the new conversation starter guidelines
   - Implement the expanded examples of good vs. bad conversation starters
   - Incorporate the updated guidance on natural language and brevity
   - Add the section on avoiding marketing-style language
2. Begin Bumble development phase
   - Test the updated AI prompt with real profiles
   - Verify "Send Like" button detection is working correctly
   - Monitor conversation starter quality with new guidelines 

FUTURE WORK:
1. Prompt Matching Implementation:
   - Matches against authoritative bumblePrompts.txt
   - Requires 0.8 confidence threshold
   - Uses fuzzy matching with similarity ratio calculation
   - Logs all potential matches for debugging
   - Reports best match with confidence score

2. Prompt Location and Response Implementation:
   - Location Strategy:
     * Scrolls to target screenshot indicated by AI
     * Three attempts to find prompt:
       1. On target screenshot
       2. One screen up from target
       3. Back on target screenshot after scrolling down
     * Additional scroll-up-and-check in the OCR detection phase
     * Falls back to bottom-of-profile approach if all attempts fail
   
   - Response Flow:
     * Locates the heart button below the prompt/statement
     * Heart button is aligned with the left edge of the prompt
     * Fixed Y distance below the end of the prompt text
     * Taps heart button to open "Send a Compliment" interface
     * Types AI-generated conversation starter
     * Closes keyboard using back key
     * Finds "Send" button using OCR
     * Clicks to send response
     * Visually documents each step with debugging overlays
     * Updates conversation starter quota 