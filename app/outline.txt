Hinge Dating App Automation Bot - Development Outline

Current Implementation:

1. Profile Processing Flow:
   - Profile Limit:
     * Maximum of 40 profiles processed
     * Exits gracefully when limit reached
     * Early exit if end of profiles detected
   
   - Early Stopping:
     * Checks for any of these messages before processing each profile:
       - "You've seen everyone for now"
       - "Try changing your filters so more people match your criteria - or check again later!"
       - "Change filters"
       - "Review skipped profiles"
     * Uses OCR with 0.8 similarity threshold
     * Saves screenshot of end message for verification
     * Creates visual debug overlay showing matched text
     * Exits gracefully with specific end message
   
   - Target Interactions:
     * Random target between 4-6 successful interactions
     * Resets after reaching target
     * Resets when disliking for any reason (undesirable, low confidence, etc.)
     * Dislikes profile when target reached
   
   - Profile Analysis:
     * Takes 6 screenshots while scrolling down
     * Processes screenshots with AI in separate thread
     * Scrolls back to top while AI processes
     * Waits for AI response
   
   - Profile Filtering:
     * Dislikes if AI returns empty response
     * Dislikes if prompt match confidence < 0.8
     * Dislikes if prompt not found after 3 attempts
     * Resets interaction counter on any dislike
     * AI automatically filters profiles with these undesirable traits:
       - Body Type Analysis:
         · Visible excess weight or body fat
         · Body width appears wider than typical fit/skinny woman
         · Visible stomach protrusion in any photo
         · Face shape is rounder with less defined jawline
         · Only face/high angle photos (hiding body)
       - Low Quality Photos:
         · Majority of photos are blurry/pixelated
         · Heavy filters or editing in majority of photos
         · Screenshots or reposts in multiple photos
       - Male Features:
         · Adam's apple visible in the throat
         · Facial hair (mustache or beard)
         · Flat chest with no boob growth visible
   
   - Results Storage:
     * Saves all profile data in organized directory structure:
       - results/profile_X/screenshots/ - Contains all screenshots
       - results/profile_X/response.json - Contains AI response and timestamp
     * Duplicates results in desktop accessible location:
       - /app/desktop/PitchPerfect_Results/profile_X/
     * Saves results for every profile, regardless of outcome
     * Includes timestamp with each response
     * Maintains original screenshot files in images/ directory

2. Screenshot Capture:
   - Takes 6 screenshots total
   - Uses consistent 68% scroll distance
   - Captures full profile content
   - Saves as profile_{count}_part{i}.png
   - Includes visualization overlays for debugging

3. AI Integration:
   - System Prompt:
     * Profile structure guide
     * Analysis requirements
     * Response generation rules
     * Trait detection for filtering undesirable profiles
   
   - Response Processing:
     * Parses JSON from text response by extracting between first { and last }
     * Returns JSON with:
       - prompt: Exact prompt text
       - response: User's response
       - conversation_starter: Generated response
       - screenshot_index: Location of prompt
     * Handles empty or error responses gracefully
     * Returns empty response for profiles with undesirable traits
   
   - Prompt Matching:
     * Matches against authoritative prompts.txt
     * Requires 0.8 confidence threshold
     * Uses fuzzy matching for flexibility

4. Prompt Location and Response:
   - Location Strategy:
     * Scrolls to target screenshot
     * Three attempts to find prompt:
       1. On target screenshot
       2. One screen up
       3. Back on target screenshot
     * Falls back to bottom if all attempts fail
   
   - Response Flow:
     * Finds "Add a comment" box
     * Clears any existing text with backspace keys
     * Types response with proper timing
     * Closes keyboard
     * Finds "Send Priority Like" button
     * Clicks to send response

5. Error Handling:
   - Profile Filtering:
     * Empty AI responses
     * Low confidence prompt matches
     * Failed prompt location
     * Failed response sending
     * Profiles with undesirable traits (weight, filters, masculine features)
   
   - Recovery Actions:
     * Dislikes profile on failure
     * Moves to next profile
     * Maintains interaction counter

6. Debugging and Visualization:
   - Screenshot Analysis:
     * Text box detection
     * Line and paragraph grouping
     * Visual overlays for debugging
   
   - Logging:
     * Scroll positions
     * Match confidence scores
     * Success/failure states
     * Interaction counts