Hinge Dating App Automation Bot - Development Outline

Current Focus:
- Context File Integration:
  * Three primary context files:
    - format.txt: Explains screenshot structure and element positioning
    - captions.txt: Database of possible image captions
    - prompts.txt: Database of all possible Hinge prompts
  * Visual debugging of text capture and grouping:
    - Text box boundaries and content
    - Line groupings
    - Paragraph formations
    - Prompt and response identification
    - Prompt-response pair relationships
  * Save visualizations to desktop for easy review
  * Use color coding to distinguish different elements
  * Include confidence scores and grouping decisions
  * Make visualizations available for each processing stage

1. Profile Loading and Initial Screenshot Capture:
   Goals:
   - Load the profile
   - Take full-screen screenshots while scrolling
   - Ensure complete profile coverage

   Currently Implemented:
   1. Profile Loading:
      * Connect to device via ADB
      * Get screen resolution
      * Calculate scroll parameters
   
   2. Screenshot Capture:
      * Initial screenshot at top
      * 8 scrolls with screenshots
      * Save as profile_{count}_part{i}.png
      * OCR processing with pytesseract

   Left to Do:
   - Implement adaptive timing based on device performance
   - Add screenshot quality verification
   - Create OCR retry mechanism with different PSM modes

2. Joke Generation:
   Goals:
   - Process screenshots and context files for joke generation
   - Generate appropriate joke and target prompt
   - Ensure contextual relevance using provided databases

   Currently Implemented:
   1. Context Files:
      * format.txt:
        - Detailed explanation of screenshot structure
        - Element positioning and relationships
        - Visual hierarchy of profile components
      * captions.txt:
        - Database of possible image captions
        - Common photo descriptions
        - Caption patterns and variations
      * prompts.txt:
        - Complete list of Hinge prompts
        - Prompt categories and types
        - Standard prompt formats
   
   2. Text Processing:
      * Extract text from screenshots
      * Combine into full profile text
      * Match against known prompts and captions
      * Format for AI processing
   
   3. AI Integration:
      * Anthropic Cloud configuration
      * Context provision:
        - Pass all three context files
        - Include processed screenshots
        - Provide engineer's custom prompt
      * Generate:
        - Contextually relevant joke
        - Appropriate target prompt
        - Response format matching Hinge style

   Left to Do:
   - Finalize engineer's custom prompt for joke generation
   - Implement context file validation
   - Add error handling for API rate limits
   - Create response quality verification

3. Prompt Location and Response:
   Goals:
   - Find target prompt on screen
   - Input generated response
   - Send response

   Currently Implemented:
   1. Text Organization:
      * Extract text with bounding boxes
      * Group into lines and paragraphs
      * Identify prompts and responses
   
   2. Prompt Finding:
      * Scroll to top
      * Take new screenshots
      * Process with OCR
      * Match target prompt
   
   3. Response Input:
      * Prepare text for input
      * Handle special characters
      * Send response

   Left to Do:
   - Implement visualization system:
     * Create visual debugging overlay:
       - For each text box:
         * Draw gray rectangle around box boundaries
         * Include text content inside box
       - For each line (group of boxes):
         * Draw red rectangle around entire line
         * Ensure line box encompasses all text boxes in line
       - For each paragraph:
         * Draw green rectangle around entire paragraph
         * Ensure paragraph box encompasses all lines in paragraph
       - For prompt paragraphs:
         * Draw blue circle at paragraph center
         * Circle radius: 10 pixels
       - For response paragraphs:
         * Draw red circle at paragraph center
         * Circle radius: 10 pixels
       - For prompt-response pairs:
         * Draw purple rectangle around both paragraphs
         * Include 5 pixel padding around both paragraphs
     * Save visualization:
       - Create new image for each screenshot
       - Draw all visual elements on top of original screenshot
       - Save as: profile_{count}_visual_{part}.png
       - Save in same directory as original screenshots
     * Visualization controls:
       - Toggle individual layers (boxes, lines, paragraphs, etc.)
       - Adjust opacity of overlay elements
       - Save visualization at any processing stage
   - Add real-time visualization for debugging:
     * Show box grouping process
     * Display confidence scores
     * Highlight problematic detections

4. Error Handling:
   Goals:
   - Recover from failed operations
   - Maintain bot operation
   - Track and report issues

   Currently Implemented:
   1. Basic Error Handling:
      * OCR failure detection
      * API error handling
      * Input verification
   
   2. Recovery:
      * Retry mechanisms
      * Profile skipping
      * State management

   Left to Do:
   - Implement comprehensive logging system:
     * Log all major operations
     * Track success/failure rates
   - Add error recovery strategies:
     * Handle common failure modes
     * Implement automatic retry logic
     * Skip problematic profiles